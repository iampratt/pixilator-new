---
alwaysApply: true
---

# üìù Coding Standards & Best Practices

## Core Principles

- **Iterate on existing code** before creating new implementations
- **Keep solutions simple** - avoid over-engineering
- **Maintain clean, organized codebase** with clear separation of concerns
- **Avoid code duplication** - check for existing similar functionality
- **Environment awareness** - consider dev, test, and prod differences

## Code Quality Standards

### File Organization

- **Maximum 200-300 lines per file** - refactor when approaching this limit
- **Single responsibility principle** - each file should have one clear purpose
- **Descriptive naming** - use clear, self-documenting variable and function names

### Code Patterns

- **Prefer existing patterns** over introducing new ones
- **Remove old implementations** when introducing new patterns
- **Focus on relevant areas** - don't touch unrelated code
- **Consider side effects** - think about what other code might be affected

### Environment Considerations

- **No mocking in dev/prod** - only mock data in tests
- **Environment-specific configurations** - use proper env variables
- **Never overwrite .env files** without explicit confirmation

## Development Workflow

- **Always start new server** after making changes for testing
- **Kill existing servers** before starting new ones to avoid conflicts
- **Write thorough tests** for all major functionality
- **Avoid one-time scripts** in codebase files

## Error Handling & Testing

- **Robust error handling** with user-friendly messages
- **Comprehensive testing** for critical functions
- **Graceful degradation** when services are unavailable

## Code Review Checklist

- [ ] Does this follow existing patterns?
- [ ] Is the solution simple and clear?
- [ ] Are there any code duplications?
- [ ] Does this affect other areas of the codebase?
- [ ] Is proper error handling implemented?
- [ ] Are tests included for new functionality?
