---
alwaysApply: true
---

# 🏗️ Pixilator Project Structure & Architecture

## Core Architecture

This is a **full-stack AI image generator** built with modern web technologies and cost-optimized infrastructure.

### Key Components:

- **Frontend**: React/Next.js with modern UI/UX
- **Backend**: Serverless functions (Vercel/Netlify Functions)
- **Database**: Supabase PostgreSQL for user data and image history
- **AI Services**: Stable Diffusion + LLaMA-2/Mistral via Hugging Face
- **Storage**: Cloudinary or Supabase Storage for generated images
- **Hosting**: Free-tier Vercel/Netlify with built-in CDN

### Project Structure Guidelines:

```
Pixilator/
├── src/
│   ├── components/     # Reusable UI components
│   ├── pages/         # Next.js pages or React routes
│   ├── api/           # Serverless API endpoints
│   ├── lib/           # Utility functions and configurations
│   ├── styles/        # Global styles and themes
│   └── types/         # TypeScript type definitions
├── public/            # Static assets
├── tests/             # Test files
└── docs/              # Documentation
```

### Core Workflow:

1. **User Input** → Frontend form with prompt + style options
2. **Prompt Refinement** → LLM call to expand/improve user prompt
3. **Negative Prompt Generation** → AI-generated negative prompts
4. **Image Generation** → Stable Diffusion API call
5. **Storage & Database** → Save image URL and metadata
6. **History & Caching** → User history with local caching

### File Organization Principles:

- Keep files under 200-300 lines - refactor when needed
- Group related functionality together
- Use clear, descriptive naming conventions
- Separate concerns: UI, API, utilities, types
